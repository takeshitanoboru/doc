Ryu rest_router
===============

Introduction
------------

RyuにはOpenflow Switchをルータとして機能させる事ができます。
ここではルータとしての利用方法について記述します。

REST Interface
--------------

rest_routerを操作するためのコマンドを以下に示します。

    +-------------------+------+-------------+----------------+-------------------------------+------------------------+
    |       URL         |Method|URL Arguments|      Data      |          Data Fields          |      Description       |
    +===================+======+=============+================+===============================+========================+
    |/router/{switch_id}| GET  |switch:all,  |      None      |              None             |Get specific switch's   |
    |                   |      |   switch_id |                |                               |data                    |
    |                   +------+-------------+----------------+-------------------------------+------------------------+
    |                   | POST |switch:all,  |{"<field1>":    |There are three patterns in    |Set address             |
    |                   |      |   switch_id | "<value1>",    |"field":"value" pairs:         | or static route        |
    |                   |      |             | "<field2>":    |                               | or default route       |
    |                   |      |             | "<value2>",...}|(1)set address                 |                        |
    |                   |      |             |                |{"address":"<A.B.C.D/M>"}      |                        |
    |                   |      |             |                |                               |                        |
    |                   |      |             |                |(2-1)set static route          |                        |
    |                   |      |             |                |{"destination":"<A.B.C.D/M>",  |                        |
    |                   |      |             |                | "gateway":"<E.F.G.H>"}        |                        |
    |                   |      |             |                |                               |                        |
    |                   |      |             |                |(2-2)set default route         |                        |
    |                   |      |             |                |{"gateway":"<E.F.G.H>"}        |                        |
    |                   |      |             |                |                               |                        |
    |                   |      |             |                |Note: Address must be set      |                        |
    |                   |      |             |                |      before the route.        |                        |
    |                   +------+-------------+----------------+-------------------------------+------------------------+
    |                   |DELETE|switch:all,  |                |(1)delete address              |Delete specific switch's|
    |                   |      |   switch_id |                |{"address_id":"<int>"}         |data                    |
    |                   |      |             |                |                               |                        |
    |                   |      |             |                |(2)delete route                |                        |
    |                   |      |             |                |{"route_id":"<int>"}           |                        |
    +-------------------+------+-------------+----------------+-------------------------------+------------------------+



Examples using curl
-------------------

ここではrest_router(switch_id=000000000000001)配下のホスト(172.16.10.0/24)から
対向のルータ(switch_id=000000000000002)配下のホスト(192.168.30.0/24)への
静的ルートを設定する例を紹介します。

    +------------+   +-------------------------+   +-------------------------+   +-------------+
    |172.16.10.10|---|switch_id=000000000000001|---|switch_id=000000000000002|---|192.168.30.10|
    +------------+   +-------------------------+   +-------------------------+   +-------------+

最初にryu-maneger上でrest_routerを起動させます。

    $ ryu-manager rest_router.py
    flagfile = /etc/ryu/ryu.conf
    loading app ryu.controller.ofp_handler
    loading app rest_router.py
    instantiating app rest_router.py
    instantiating app ryu.controller.ofp_handler

次の表示がされたらRyuとスイッチの間の接続に成功です。

    [RT][INFO] switch_id=0000000000000001: Join as router.
    [RT][INFO] switch_id=0000000000000002: Join as router.

ルータ(switch_id=0000000000000001)にアドレスを設定します。

    curl -X POST -d '{"address":"172.16.10.1/24"}' http://localhost:8080/router/0000000000000001
      {
        "switch_id=0000000000000001": {
          "result": "success",
          "details": "add Address [address_id=1]"
        }
      }

    curl -X POST -d '{"address":"192.168.10.1/24"}' http://localhost:8080/router/0000000000000001
      {
        "switch_id=0000000000000001": {
          "result": "success",
          "details": "add Address [address_id=2]"
        }
      }

ルータ(switch_id=0000000000000002)にアドレスを設定します。

    curl -X POST -d '{"address":"192.168.30.1/24"}' http://localhost:8080/router/0000000000000002
      {
        "switch_id=0000000000000002": {
          "result": "success",
          "details": "add Address [address_id=1]"
        }
      }

    curl -X POST -d '{"address":"192.168.10.20/24"}' http://localhost:8080/router/0000000000000002
      {
        "switch_id=0000000000000002": {
          "result": "success",
          "details": "add Address [address_id=2]"
        }
      }

ルータ(switch_id=0000000000000001)にスタティックルートを設定します。

    curl -X POST -d '{"destination":"192.168.30.0/24","gateway":"192.168.10.20"}' http://localhost:8080/router/0000000000000001
      {
        "switch_id=0000000000000001": {
          "result": "success",
          "details": "add Route [route_id=1]"
        }
      }

ルータ(switch_id=0000000000000002)にスタティックルートを設定します。

    curl -X POST -d '{"destination":"172.16.10.0/24", "gateway":"192.168.10.1"}' http://localhost:8080/router/0000000000000002
      


ルータ(switch_id=0000000000000001)に設定された情報を表示します。

    curl http://localhost:8080/router/0000000000000001
      {
        "switch_id=0000000000000001": {
          "address_id=2": "192.168.10.1/24",
          "address_id=1": "172.16.10.1/24",
          "route_id=1": {
            "destination": "192.168.30.0/24",
            "gateway": "192.168.10.20"
          }
        }
      }

ルータ(switch_id=0000000000000002)に設定された情報を表示します。

    curl http://localhost:8080/router/0000000000000002
      {
        "switch_id=0000000000000002": {
          "address_id=2": "192.168.10.20/24",
          "address_id=1": "192.168.30.1/24"
        }
      }

172.16.10.0/24に所属するホストマシン上で以下を実行し、pingが通ることを確認します。

    host[172.16.10.10] $ ping 192.168.30.10

【以降は、address_id=1を消して疎通できなくする例より、route_id=1を消して疎通できなくなる例のほうが良いです】
→route_id=1を削除してもMAC書き換えのフローが削除されていないため、
  上記フローとpriority=0 actions=NORMALのフローを通って疎通できてしまう事象があります。


ルータ(switch_id=0000000000000001)のaddress_id=1を削除。

    curl -X DELETE -d '{"route_id": "1"}' http://localhost:8080/router/0000000000000001

ルータ(switch_id=0000000000000001)に設定された情報を表示します。

    curl http://localhost:8080/router/0000000000000001
      {
        "switch_id=0000000000000001": {
          "address_id=2": "192.168.10.1/24",
          "route_id=1": {
            "destination": "192.168.30.0/24",
            "gateway": "192.168.10.20"
          }
        }
      }

172.16.10.0/24に所属するホストマシン上で以下を実行し、pingが通らないことを確認します。

    host[172.16.10.10] $ ping 192.168.30.10
